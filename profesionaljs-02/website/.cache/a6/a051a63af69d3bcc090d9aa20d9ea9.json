{"id":"ejercicios/prototype.html","dependencies":[{"name":"C:\\Users\\mdiberardino\\Desktop\\escuela_js_platzi\\profesionaljs-02\\website\\package.json","includedInParent":true,"mtime":1573411072170}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n        <title>Document</title>\r\n    </head>\r\n    <body>\r\n        <a href=\"/ejercicios/\">Go back</a>\r\n        <p><em>Abre la consola</em></p>\r\n\r\n        <script>// un obejto comun y corriente\nconst zelda = {\n  name: 'Zelda'\n};\n\nzelda.saludar = function () {\n  console.log(`Hola soy : ${this.name}`);\n};\n\nzelda.saludar();\nconst link = {\n  name: 'link'\n};\n\nlink.saludar = function () {\n  console.log(`Hola soy : ${this.name}`);\n};\n\nlink.saludar(); //seamos un poco mas eficientes\n\nfunction Hero(name) {\n  const hero = {\n    name: name\n  };\n\n  hero.saludar = function () {\n    console.log(`Mi nombre es : ${this.name}`);\n  };\n\n  return hero;\n}\n\nconst zelda2 = Hero('zelda');\nzelda2.saludar();\nconst link2 = Hero('link');\nlink2.saludar(); //Aun podemos mejorar mas y evitar tener que crear la misma funcion cada vez que instanciamos un objeto\n\nconst heroMethods = {\n  Saludar: function () {\n    console.log(`Me llamo : ${this.name}`);\n  }\n};\n\nfunction Hero2(name) {\n  const hero = {\n    name: name\n  };\n  hero.saludar = heroMethods.Saludar;\n  return hero;\n}\n\nconst zelda3 = Hero2('zelda');\nzelda3.saludar();\nconst link3 = Hero2('link');\nlink3.saludar(); //Object.create\n//const nuevoObjeto = Object.create(objeto);\n\nconst heroMethods2 = {\n  Saludar: function () {\n    console.log(`Soy Heroe! ${this.name}`);\n  }\n};\n\nfunction Hero3(name) {\n  const hero = Object.create(heroMethods2);\n  hero.name = name;\n  return hero;\n}\n\nconst zelda4 = Hero3('zelda');\nzelda4.Saludar();\nconst link4 = Hero3('link');\nlink4.Saludar(); //Object.create con metodos dentro del prototipo\n\nfunction Hero4(name) {\n  const hero = Object.create(Hero4.prototype);\n  hero.name = name;\n  return hero;\n}\n\nHero4.prototype.saludar = function () {\n  console.log(`Soy Heroina: ${this.name}`);\n};\n\nconst zelda5 = Hero4('zelda');\nzelda5.saludar();\nconst link5 = Hero4('link');\nlink5.saludar(); //new es un atajo (azucar sintactica) para llevar Hero.prototype al objeto que se instancia\n\nfunction Hero5(name) {\n  //const hero = Object.create(Hero5.prototype);\n  this.name = name; //return this;\n}\n\nHero5.prototype.saludar = function () {\n  console.log(`New: ${this.name}`);\n};\n\nconst zelda6 = new Hero5('zelda');\nzelda6.saludar();\nconst link6 = new Hero5('link');\nlink6.saludar();</script>\r\n    </body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"1771972f4240ba9b8f8e38737affe356","cacheData":{"env":{}}}