{"version":3,"sources":["ejercicios/observer/index.ts"],"names":[],"mappings":"AASA,IAAA,YAAA;AAAA;AAAA,YAAA;AAGI,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AAFA,SAAA,SAAA,GAAwB,EAAxB;AAGI,QAAM,EAAE,GAAqB,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAA7B;AACA,IAAA,EAAE,CAAC,gBAAH,CAAoB,OAApB,EAA6B,YAAA;AAAM,aAAA,KAAI,CAAC,MAAL,CAAY,EAAE,CAAC,KAAf,CAAA;AAAqB,KAAxD;AACH;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,QAAV,EAA4B;AACxB,SAAK,SAAL,CAAe,IAAf,CAAoB,QAApB;AACH,GAFD;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAA8B;AAC1B,QAAM,KAAK,GAAG,KAAK,SAAL,CAAe,SAAf,CAAyB,UAAA,GAAA,EAAG;AACtC,aAAO,GAAG,KAAK,QAAf;AACH,KAFa,CAAd;AAGA,SAAK,SAAL,CAAe,MAAf,CAAsB,KAAtB,EAA6B,CAA7B;AACH,GALD;;AAOA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,SAAL,CAAe,OAAf,CAAwB,UAAA,GAAA,EAAG;AAAI,aAAA,GAAG,CAAC,MAAJ,CAAW,IAAX,CAAA;AAAgB,KAA/C;AACH,GAFD;;AAGJ,SAAA,YAAA;AAtBA,CAAA,EAAA;;AAwBA,IAAA,YAAA;AAAA;AAAA,YAAA;AAEI,WAAA,YAAA,GAAA;AACI,SAAK,EAAL,GAAU,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAV;AACH;;AAED,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,IAAP,EAAgB;AACZ,SAAK,EAAL,CAAQ,SAAR,GAAoB,IAApB;AACH,GAFD;;AAGJ,SAAA,YAAA;AATA,CAAA,EAAA;;AAWA,IAAM,KAAK,GAAG,IAAI,YAAJ,EAAd;AACA,IAAM,OAAO,GAAG,IAAI,YAAJ,EAAhB;AAEA,KAAK,CAAC,SAAN,CAAgB,OAAhB;AAEA,UAAU,CAAC,YAAA;AACP,EAAA,KAAK,CAAC,WAAN,CAAkB,OAAlB;AACH,CAFS,EAEP,KAFO,CAAV","file":"observer.34a0b697.js","sourceRoot":"..","sourcesContent":["interface Observer {\r\n    update: (data: any) => void;\r\n}\r\n\r\ninterface Subject {\r\n    subscribe: (observer: Observer) => void\r\n    unsubscribe: (observer: Observer) => void\r\n}\r\n\r\nclass BitcoinPrice implements Subject {\r\n    observers: Observer[] = [];\r\n\r\n    constructor () {\r\n        const el: HTMLInputElement = document.querySelector('#value');\r\n        el.addEventListener('input', () => this.nofity(el.value));\r\n    }\r\n\r\n    subscribe(observer: Observer) {\r\n        this.observers.push(observer)\r\n    }\r\n\r\n    unsubscribe(observer: Observer) {\r\n        const index = this.observers.findIndex(obs =>{\r\n            return obs === observer;\r\n        });\r\n        this.observers.splice(index, 1);\r\n    }\r\n\r\n    nofity(data: any){\r\n        this.observers.forEach( obs => obs.update(data));\r\n    }\r\n}\r\n\r\nclass PriceDisplay implements Observer {\r\n    private el: HTMLElement;\r\n    constructor () {\r\n        this.el = document.querySelector('#price');\r\n    }\r\n\r\n    update(data: any) {\r\n        this.el.innerText = data;\r\n    }\r\n}\r\n\r\nconst value = new BitcoinPrice();\r\nconst display = new PriceDisplay();\r\n\r\nvalue.subscribe(display);\r\n\r\nsetTimeout(() => {\r\n    value.unsubscribe(display);\r\n}, 10000);\r\n"]}