{"version":3,"sources":["ejercicios/typescript/index.ts"],"names":[],"mappings":"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","file":"typescript.72c601f0.js","sourceRoot":"..","sourcesContent":["console.log('Hello, TypeScript');\r\n\r\nconst add = (a: number, b: number) => {\r\n    return a + b;\r\n}\r\n\r\nconst sum = add(2, 3);\r\n\r\nconsole.log(sum);\r\n\r\n//tipos de datos\r\n\r\n//Boolean\r\nlet muted: boolean = true;\r\nmuted = false;\r\n\r\n//Numeros\r\nlet numerador: number = 42;\r\nlet denominador: number = 6;\r\nlet resultado = numerador / denominador;\r\n\r\n//string\r\nlet nombre: string = 'massimo';\r\nlet saludo: string = `Me llamo ${nombre}`;\r\n\r\n//arreglos\r\nlet people: string[] = [];\r\npeople = ['massimo', 'isabela', 'maria'];\r\n//people.push(\"9000\");\r\n\r\n//arreglos de multiples tipos de datos\r\nlet peopleAndNumbers: Array< string | number > = [];\r\npeopleAndNumbers.push('ricardo');\r\npeopleAndNumbers.push(9000);\r\n\r\n//enum\r\nenum Color {\r\n    Rojo = 'Rojo',\r\n    Verde = 'Verde',\r\n    Azul = 'Azul'\r\n}\r\n\r\nlet colorFavorito: Color = Color.Azul;\r\nconsole.log(`Mi color favorito es ${colorFavorito}`)\r\n\r\n// any\r\nlet comodin: any = \"Joker\";\r\ncomodin = {type: 'Wilcard'};\r\n\r\n//object\r\nlet someObject: object = {type: 'Wilcard'};\r\n\r\n//funciones\r\n\r\nfunction suma(a: number, b: number): number{\r\n    return a + b;\r\n}\r\n\r\nconst sumita = suma(2, 4);\r\n\r\nfunction createAdder(a: number): (number) => number {\r\n    return function(b: number) {\r\n        return b + a;\r\n    }\r\n}\r\n\r\nconst addFour = createAdder(4);\r\nconst fourPlus6 = addFour(6);\r\n\r\n//funcion simple\r\nfunction fullName(firstName: string, lastName: string): string {\r\n    return `${firstName} ${lastName}`;\r\n}\r\n\r\n//funcion que puede o no recibir alguno de los parametros\r\nfunction fullNameOpcional(firstName?: string, lastName?: string): string {\r\n    return `${firstName} ${lastName}`;\r\n}\r\n\r\n//funcion con valores pre seteados\r\nfunction fullNameSeteado(firstName: string = 'pedro', lastName: string = 'diaz'): string {\r\n    return `${firstName} ${lastName}`;\r\n}\r\n\r\nconst pedro = fullName('pedro', 'diaz');\r\nconst pedroOpcional = fullNameOpcional('pedro');\r\nconst pedroSeteado = fullNameSeteado();\r\n\r\n\r\n//interfaces\r\ninterface Rectangulo {\r\n    ancho: number,\r\n    alto: number,\r\n    color?: Color\r\n}\r\n\r\nlet rect: Rectangulo = {\r\n    ancho: 4,\r\n    alto: 6,\r\n    color: Color.Verde,\r\n}\r\n\r\nfunction area(r: Rectangulo): number {\r\n    return r.alto * r.alto;\r\n} \r\n\r\nconst areaRect = area(rect);\r\n\r\nrect.toString = function () {\r\n    return this.color ? `Un rectangulo ${this.color}` : `Un rectangulo`;\r\n}"]}